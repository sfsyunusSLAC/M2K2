<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PAT" Id="{3be33162-daee-4f51-87ff-ad4c09c1e309}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PAT
VAR_INPUT
    Velocity : LREAL;
END_VAR
VAR_OUTPUT
    FwLimPos : LREAL; // Positive limit position
    BwLimPos : LREAL; //
END_VAR
VAR_IN_OUT
    Stage : DUT_MotionStage;
END_VAR
VAR
    fbMicroStepCount : FB_MicroStepCountTest;

    fbMove: MC_Jog;
    tFwLim: F_TRIG;
    tBwLim: F_TRIG;
    Dir: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Relative move until limit, reverse and repeat, record positions, do math and spit out travel range

tFwLim(CLK:=Stage.bLimitForwardEnable);
tBwLim(CLK:=Stage.bLimitBackwardEnable);

WHILE Stage.bLimitBackwardEnable AND Stage.bLimitForwardEnable DO
    IF tFwLim.Q OR tBwLim.Q THEN
        IF (Dir = 1 AND tBwLim.Q) OR (Dir = -1 AND tFwLim.Q) THEN
            // Error, limits backwards
            EXIT;
        END_IF

        IF tFwLim.Q THEN
            FwLimPos := Stage.Axis.NcToPlc.ActPos;
        ELSIF tBwLim.Q THEN
            BwLimPos := Stage.Axis.NcToPlc.ActPos;
        END_IF


    END_IF



END_WHILE

// Discover minimum step size in one direction

// Attempt minimum step size in alternating direction

fbMove(Axis:=Stage.Axis, Velocity:=Velocity, Mode:=E_JogMode.MC_JOGMODE_CONTINOUS);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>